<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain Driven Design on </title>
    <link>http://seedstack.org/tags/domain-driven-design/</link>
    <description>Recent content in Domain Driven Design on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://seedstack.org/tags/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aggregate design</title>
      <link>http://seedstack.org/guides/ddd-for-beginners/aggregate-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/guides/ddd-for-beginners/aggregate-design/</guid>
      <description>&lt;p&gt;Most business domains have very interconnected Entities, sometimes up to the point where there is always a path going
from any Entity to any other. We can try to minimize the number of associations in our design, and this is a good practice
but it can lead to a translation loss between business and software. In a typical object model, it is difficult to
clearly see the boundaries of a change. This is particularly acute in systems with concurrent access such as Web
applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Anemic Domain Model</title>
      <link>http://seedstack.org/guides/ddd-for-beginners/anemic-domain-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/guides/ddd-for-beginners/anemic-domain-model/</guid>
      <description>&lt;p&gt;An Anemic Domain Model is something that can be found a lot of projects and, astonishingly, is often viewed as a good
practice. But as you may already have deduced from its name, it doesn&amp;rsquo;t sound like something desirable and certainly not
in DDD-oriented software.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Behavior and services</title>
      <link>http://seedstack.org/guides/ddd-for-beginners/behavior-and-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/guides/ddd-for-beginners/behavior-and-services/</guid>
      <description>&lt;p&gt;Sometimes behavior doesn&amp;rsquo;t fit into Entities or Value Objects. Pure operations may exist in the domain and should therefore
be modeled as such. Domain-Driven-Design propose the Service pattern to model these operations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Entities and Value Objects</title>
      <link>http://seedstack.org/guides/ddd-for-beginners/entities-and-value-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/guides/ddd-for-beginners/entities-and-value-objects/</guid>
      <description>&lt;p&gt;Modeling business concepts with objects may seem very intuitive at first sight but there are a lot of difficulties
awaiting us in the details. To clarify the meaning of model elements and propose a set of design practices, Domain-Driven
Design defines three patterns that express the model: Entities, Value Objects and Services. This chapter will focus
on Entities and Value Objects, leaving Services for their &lt;a href=&#34;http://seedstack.org/guides/ddd-for-beginners/behavior-and-services/&#34;&gt;own chapter&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JPA with the business framework</title>
      <link>http://seedstack.org/addons/jpa/business/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/addons/jpa/business/</guid>
      <description>While you can do plain JPA by injecting EntityManager anywhere, it is better to define an architectural layer where you encapsulate persistence-related operations. In the business framework, persistence is confined to Repositories.
JPA repository Default JPA repository The JPA add-on will provide a default JPA repository implementation for every aggregate that does not have a custom one. Two cases may occur:
 You don&amp;rsquo;t have any custom repository interface an particular aggregate.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://seedstack.org/guides/ddd-for-beginners/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/guides/ddd-for-beginners/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aggregates</title>
      <link>http://seedstack.org/docs/business/aggregates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/aggregates/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;An aggregate is a cluster of cohesive entities and value objects that is treated as a single unit.&lt;br&gt;
Aggregates have clear boundaries and are loosely coupled to each other.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Assemblers</title>
      <link>http://seedstack.org/docs/business/assemblers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/assemblers/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;An assembler is an interface object responsible for mapping one or more aggregate(s) to a Data Transfer Object (DTO)
and back.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bibliography</title>
      <link>http://seedstack.org/docs/business/bibliography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/bibliography/</guid>
      <description>To go beyond what is described in this documentation, we recommend a few books which will help you to better understand DDD, independently of the business framework.
Domain-Driven Design community  This is a major online resource about Domain-Driven Design with a lot of contents to discover and learn about it.
 Online community  Eric Evans: Domain-Driven Design Reference  This book by Eric Evans is a summary of patterns and definitions of Domain-Driven Design.</description>
    </item>
    
    <item>
      <title>Business code</title>
      <link>http://seedstack.org/docs/basics/business/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/basics/business/</guid>
      <description>Now it is time to spice up our &amp;laquo;Hello World&amp;raquo; application with some business code. With SeedStack business framework, it is easy to write clean and maintainable business code.
Domain-Driven Design Domain-Driven Design is a software approach built on the idea of solving business problems through code. This is done by focusing on the heart of the business logic, to distill a design that can solve business problems.
The business framework helps with the implementation of that domain model.</description>
    </item>
    
    <item>
      <title>Domain events</title>
      <link>http://seedstack.org/docs/business/domain-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/domain-events/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;A domain event is used to represent something that happened in the domain.&lt;br&gt;
It happened in the past and is of interest to the business.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Entities</title>
      <link>http://seedstack.org/docs/business/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/entities/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;An entity is used to represent a domain concept distinguished by an identity.&lt;br&gt;
This identity must remain the same through the whole entity lifecycle.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factories</title>
      <link>http://seedstack.org/docs/business/factories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/factories/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;A factory is responsible for creating a whole, internally consistent aggregate when it is too complicated to do
it in a constructor.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fluent assembler</title>
      <link>http://seedstack.org/docs/business/fluent-assembler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/fluent-assembler/</guid>
      <description>&lt;p&gt;As described in the &lt;a href=&#34;http://seedstack.org/docs/business/assemblers/&#34;&gt;assemblers page&lt;/a&gt;, you can inject assemblers and use them
directly. However, the business framework provides a Domain-Specific Language (DSL) to do common Aggregate/DTO mapping
operations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Layers</title>
      <link>http://seedstack.org/docs/business/layers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/layers/</guid>
      <description>Domain-Driven Design itself can be successfully applied in variety of software architectural styles. Some are very broad and tend to define every aspect of the system, others are more focused and try to address a specific demand.
The business framework itself can adapt to several architectural styles. This documentation will focus on the traditional layered architecture from the Eric Evans DDD book, improved by the usage of the Dependency Inversion Principle.</description>
    </item>
    
    <item>
      <title>Package layout</title>
      <link>http://seedstack.org/docs/business/package-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/package-layout/</guid>
      <description>We recommend a well-defined package layout for organizing your business code according to the software architecture described above.
The domain The root package for the domain layer is:
[base.package].domain  The domain can be composed of several sub-domains that can be specified as sub-packages:
[base.package].domain.subdomain1 [base.package].domain.subdomain2 ...  The domain package (or each sub-domain package if relevant) contains:
 A model package containing aggregates, each in its own package. An aggregate package contains  The aggregate root along with other related entities and value objects, The factory interface if any, The repository interface if any, The aggregate policies if any.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>http://seedstack.org/docs/business/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/pagination/</guid>
      <description>Pagination is a common need in business applications. The business framework provides a paginator</description>
    </item>
    
    <item>
      <title>Persistence</title>
      <link>http://seedstack.org/docs/basics/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/basics/persistence/</guid>
      <description>Now that we have a domain model, we would like to use some persistence with it. In Domain-Driven Design, persistence is done with Repositories which work on whole aggregates.
We need some data first! To be able to test this, we need some sample data. A class implementing LifecycleListener will provide the opportunity to insert data at application startup.
In the package infrastructure, create a SampleDataGenerator class:
package org.generated.project.infrastructure; import javax.</description>
    </item>
    
    <item>
      <title>Qualified injection</title>
      <link>http://seedstack.org/docs/business/qualified-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/qualified-injection/</guid>
      <description>In the business framework, you always inject dependencies by interface not by implementation class. For each injection point, two situations are possible:
 If only one implementation exists for a specific interface, it is injected without ambiguity. If multiple exists for a specific interface, the injection point should be qualified to select the implementation to inject. This done by putting an qualifier annotation along the @Inject annotation.  Built-in qualifiers SeedStack provides several built-in qualifiers.</description>
    </item>
    
    <item>
      <title>Repositories</title>
      <link>http://seedstack.org/docs/business/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/repositories/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;A repository is responsible for consistently storing and retrieving a whole aggregate.&lt;br&gt;
It has a simple collection-like global interface and optionally domain-specific methods.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>http://seedstack.org/docs/business/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/services/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;A service is a stateless object that implements domain, applicative or infrastructure logic.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Specifications</title>
      <link>http://seedstack.org/docs/business/specifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/specifications/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;A specification encapsulates a business criteria and is able to tell if a candidate object matches this criteria.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>http://seedstack.org/docs/business/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/tutorial/</guid>
      <description>&lt;p&gt;This tutorial will guide you step-by-step in building a full application with SeedStack business framework.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Value Objects</title>
      <link>http://seedstack.org/docs/business/value-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/value-objects/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;callout callout-def&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
            
            
                &lt;i class=&#34;fa fa-quote-left icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;A value object is used to describe or compute some characteristic of a domain concept.&lt;br&gt;
It does not have an identity.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What is Domain-Driven Design ?</title>
      <link>http://seedstack.org/docs/business/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/docs/business/</guid>
      <description>Domain-Driven Design is a software approach built on the idea of solving business problems through code. This is done by focusing on the heart of the business logic, to distill a design that can solve business problems.
The business framework helps with the implementation of that domain model. It also provides default implementations and helpers to quickly address related needs like model mapping or pagination.
What is DDD ? Domain-Driven Design (DDD) is a term coined by Eric Evans in his book &amp;laquo;Domain-Driven design&amp;raquo;, published in 2003.</description>
    </item>
    
  </channel>
</rss>